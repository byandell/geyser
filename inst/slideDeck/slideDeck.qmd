---
title: "Geyser Shiny Modules<br>with Old Faithful"
author: "Brian S. Yandell"
date: "11 December 2024"
date-format: "D MMMM YYYY"
footer: "[byandell/geyser](https://github.com/byandell/geyser)"
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    code-block-height: 450px
# https://github.com/mine-cetinkaya-rundel/quarto-dashboards/blob/main/1-hello-dashboards/index.qmd
---

## Plan of Study {.smaller}

:::: {.columns}
::: {.column width="60%"}
- [Build a Shiny Module](https://github.com/byandell/geyser/blob/main/inst/build_module)
[3-9]
  - [Faithful code](https://github.com/byandell/geyser/blob/main/inst/build_module/1_oldFaithful)
[3-4]
  - [Modular Geyser App](https://github.com/byandell/geyser/blob/main/inst/build_module/4_moduleServer) [5-6]
  - [Shiny Module in one File](https://github.com/byandell/geyser/blob/main/inst/build_module/4_moduleServer/moduleServer.R) [7-9]
  - [Reactlog](https://github.com/byandell/geyser/blob/main/inst/reactlog) [10-11]
- [Connect Multiple Shiny Modules](https://github.com/byandell/geyser/blob/main/inst/connect_modules)
[12-18]
  - Modules across [Pages](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R) [12-13]
  - Modules with [Rows and Columns](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R) [14-15]
  - Embed [Switch](https://github.com/byandell/geyser/blob/main/R/switch.R)
in
[Module Demo](https://github.com/byandell/geyser/blob/main/inst/connect_modules/app.R) [16-17]
  - [Twin](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appTwin.R)
&
[Flip](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appFlip.R)
Modules [18]
- Explore [Quarto Examples](https://github.com/byandell/geyser/blob/main/inst/slideDeck) [19]
- [Organize your Repo](https://github.com/byandell/geyser/) [20]
  - Clone my Repo [21]
- Questions? Links to materials [22]
:::

::: {.column width="40%"}
![[Shiny FaithFul App Example](https://shiny.posit.co/r/gallery/start-simple/faithful/)](images/faithful.png)

![[byandell.github.io](https://byandell.github.io)](images/adobe-express-qr-code.png)
:::
::::

## Original Old Faithful Code

```{.r filename="inst/build_module/1_oldfaithful/app.R" code-line-numbers="|2-9|10|12-15|18-21|22-24|25-28"}
ui <- bootstrapPage(
  selectInput(inputId = "n_breaks",
              label = "Number of bins in histogram (approximate):",
              choices = c(10, 20, 35, 50), selected = 20),
  checkboxInput(inputId = "individual_obs",
                label = strong("Show individual observations"),
                value = FALSE),
  checkboxInput(inputId = "density", label = strong("Show density estimate"),
                value = FALSE),
  plotOutput(outputId = "main_plot", height = "300px"),
  
  # Display this only if the density is shown
  conditionalPanel(condition = "input.density == true",
    sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
      min = 0.2, max = 2, value = 1, step = 0.2))
)
server <- function(input, output) {
  output$main_plot <- renderPlot({
    hist(faithful$eruptions, probability = TRUE,
         breaks = as.numeric(input$n_breaks),
         xlab = "Duration (minutes)", main = "Geyser eruption duration")
    if (input$individual_obs) {
      rug(faithful$eruptions)
    }
    if (input$density) {
      dens <- density(faithful$eruptions, adjust = input$bw_adjust)
      lines(dens, col = "blue")
    }
  })
}
shiny::shinyApp(ui, server)
```

- `ui` has input, output and conditional slider
- `server` has `hist` and logic for optional `rug` and `density`

## FaithFul code with Server Logic

```{.r filename="inst/build_module/1_oldfaithful/appLogic.R" code-line-numbers="|7-10|15-19|21-26|"}
ui <- bootstrapPage(
  selectInput(inputId = "n_breaks",
  ...
  plotOutput(outputId = "main_plot", height = "300px"),
  
  # Display this only if the density is shown
  uiOutput("bw_adjust")
#  conditionalPanel(condition = "input.density == true",
#    sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
#      min = 0.2, max = 2, value = 1, step = 0.2))
)
server <- function(input, output) {
  output$main_plot <- renderPlot({
  ...
    if (input$density) {
      req(input$bw_adjust)
      dens <- density(faithful$eruptions, adjust = input$bw_adjust)
      lines(dens, col = "blue")
    }
  })
  output$bw_adjust <- shiny::renderUI({
    if(input$density)
      sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
                  min = 0.2, max = 2, value = 1, step = 0.2)
  })
}
shiny::shinyApp(ui, server)
```

- Use `uiOutput` instead of `conditionalPanel`in `ui`.
- Check `density` and `bw_adjust` in `server` before using.
- Use `renderUI` in `server` to input `bw_adjust` if `density`.

## Modular Geyser App

```{.r filename="inst/build_module/4_moduleServer/app.R" code-line-numbers="|1-6|7-9|10|"}
ui <- bslib::page(
  geyserInput(id = "geyser"), 
  geyserOutput(id = "geyser"),
  # Display this only if the density is shown
  geyserUI(id = "geyser")
)
server <- function(input, output, session) {
  geyserServer(id = "geyser")
}
shiny::shinyApp(ui, server)
```

- `id = "geyser"` connects UI and Server components.
- Function `geyserServer()` returns a `server` function.
- Explicit function assignment to create `server` is crucial.

## Self-contained `geyserApp()` function

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R" code-line-numbers="|3-6|9|"}
geyserApp <- function() {
  ui <- bslib::page(
    geyserInput("geyser"), 
    geyserOutput("geyser"),
    # Display this only if the density is shown
    geyserUI("geyser")
  )
  server <- function(input, output, session) {
    geyserServer("geyser")
  }
  shiny::shinyApp(ui, server)
}
```

## Shiny Module in one File

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R"}
geyserServer(id) # server logic steps
geyserInput(id)  # user input
geyserOutput(id) # user output
geyserUI(id)     # user input/output
geyserApp()      # app as test function
```

[inst/build_module/4_moduleServer/moduleServer.R](https://github.com/byandell/geyser/blob/main/inst/build_module/4_moduleServer/moduleServer.R)

## Modular Geyser `Input`, `Output`, `UI` Components {.scrollable .smaller}

```{.r filename="inst/build_module/4_moduleServer/app.R" code-line-numbers="|1-2|16-17|20-21"}
geyserInput <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    shiny::selectInput(inputId = ns("n_breaks"),
                label = "Number of bins in histogram (approximate):",
                choices = c(10, 20, 35, 50),
                selected = 20),
    shiny::checkboxInput(inputId = ns("individual_obs"),
                  label = shiny::strong("Show individual observations"),
                  value = FALSE),
    
    shiny::checkboxInput(inputId = ns("density"),
                  label = shiny::strong("Show density estimate"),
                  value = FALSE))
}
geyserOutput <- function(id) {
  ns <- shiny::NS(id)
  shiny::plotOutput(ns("main_plot"), height = "300px")
}
geyserUI <- function(id) {
  ns <- shiny::NS(id)
  shiny::uiOutput(ns("bw_adjust"))
}
```

- `shiny::NS()` sets up Shiny namespace.
- `shiny::tagList()` for list of inputs.
- Explicit `package::function()` clarifies function origin.

## Modular `geyserServer` {.scrollable .smaller}

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R" code-line-numbers="|2|3|27"}
geyserServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Output Main Plot
    output$main_plot <- shiny::renderPlot({
      graphics::hist(faithful$eruptions,
                     probability = TRUE,
                     breaks = as.numeric(input$n_breaks),
                     xlab = "Duration (minutes)",
                     main = "Geyser eruption duration")
      
      if (input$individual_obs) {
        graphics::rug(faithful$eruptions)
      }
      if (input$density) {
        shiny::req(input$bw_adjust)
        dens <- stats::density(faithful$eruptions,
                               adjust = input$bw_adjust)
        graphics::lines(dens, col = "blue")
      }
    })
    
    # Input Bandwidth Adjustment
    output$bw_adjust <- shiny::renderUI({
      if(input$density) {
        shiny::sliderInput(inputId = ns("bw_adjust"),
                           label = "Bandwidth adjustment:",
                           min = 0.2, max = 2, value = 1, step = 0.2)
      }
    })
  })
}
```

- `shiny::moduleServer` returns `server` function.
- `session$ns` sets up Shiny namespace.
- `ns("by_adjust")` uses Shiny namespace.

## Reactlog: Show App Reactivity

![[inst/reactlog](https://github.com/byandell/geyser/blob/main/inst/reactlog)](images/reactlog.png)

## Reactlog: Show App Reactivity

```{.bash filename="inst/reactlog" code-line-numbers="|1-3|5-6|8-10|12-14|"}
# Enable `reactlog` and run app.
reactlog::reactlog_enable()
shiny::runApp("inst/build_module/4_moduleServer")

# Show `reactlog` in browser.
shiny::reactlogShow()

# Save log of reactive session.
geyser_log <- shiny::reactlog()
saveRDS(geyser_log, "inst/reactlog/geyser.rds")

# Retrieve previously saved reactive session.
geyser_log <- readRDS("inst/reactlog/geyser.rds")
reactlog::reactlog_show(geyser_log)
```

- Read [Shiny Reactlog](https://rstudio.github.io/reactlog/articles/reactlog.html) article.
- See [inst/reactlog](https://github.com/byandell/geyser/blob/main/inst/reactlog) examples saved as `RDS` objects.
- Re-open repo to reset `reactlog` before enabling.

## Connecting Modules across Pages

:::: {.columns}
::: {.column width="50%"}
![[inst/connect-modules/appPages.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R)](images/appPages.png)
:::

::: {.column width="50%"}
![[inst/connect-modules/pages.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/pages.qmd)](images/pagesQmd.png)
:::
::::

## Connecting Modules across Pages

```{.r filename="inst/connect_modules/appPages.R" code-line-numbers="|2-3|4-5|6-7|9-11|"}
ui <- shiny::navbarPage("Geyser Modules with NavBar, Brian Yandell",
  shiny::tabPanel("hist",
    histInput("hist"), histOutput("hist"), histUI("hist")),
  shiny::tabPanel("gghist",
    gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist")),
  shiny::tabPanel("ggpoint",
    ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint")))
server <- function(input, output, session) {
  histServer("hist")
  gghistServer("gghist")
  ggpointServer("ggpoint")
}
shiny::shinyApp(ui, server)
```

- [inst/connect_modules/appPages.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R)
- [inst/connect_modules/pages.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/pages.qmd)

## Connecting Module Rows and Columns

:::: {.columns}
::: {.column width="50%"}
![[inst/connect_modules/appRows.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R)](images/appRows.png)
:::

::: {.column width="50%"}
![[inst/connect_modules/rows.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/rows.qmd)](images/rowsQmd.png)
:::
::::

## Connecting Modules Rows and Columns {.scrollable .smaller}

```{.r filename="inst/connect_modules/appRows.R" code-line-numbers="|3-5|6-12|14-17|"}
ui <- bslib::page(
  title = "Geyser Rows Modules",
    bslib::layout_columns(
      datasetsInput("datasets"),
      datasetsUI("datasets")),
  bslib::layout_columns(
    bslib::card(bslib::card_header("hist"),
      histInput("hist"), histOutput("hist"), histUI("hist")),
    bslib::card(bslib::card_header("gghist"),
      gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist")),
    bslib::card(bslib::card_header("ggpoint"),
      ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint"))))
server <- function(input, output, session) {
  dataset <- datasetsServer("datasets")
  histServer("hist", dataset)
  gghistServer("gghist", dataset)
  ggpointServer("ggpoint", dataset)
}
shiny::shinyApp(ui, server)
```

- [inst/connect_modules/appRows.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R):
Shiny app version
- [inst/connect_modules/rows.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/rows.qmd):
Quarto version
- [R/rows.R](https://github.com/byandell/geyser/blob/main/R/rows.R):
Shiny module version
- [inst/connect_modules/appRowsModule.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRowsModule.R):
Shiny app with `R/rows.R` functions

## Connecting Modules with Plot Switch

![[R/switch.R](https://github.com/byandell/geyser/blob/main/R/switch.R)](images/switch.png)


## Connecting Modules with Plot Switch {.scrollable .smaller}

```{.r filename="R/switch.R" code-line-numbers="|4-7|9-20|23-33|34-37|38-41|42-52|"}
switchServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns
    dataset <- datasetsServer("datasets")
    histServer("hist", dataset)
    gghistServer("gghist", dataset)
    ggpointServer("ggpoint", dataset)
    
    output$inputSwitch <- shiny::renderUI({
      shiny::req(input$plottype)
      get(paste0(input$plottype, "Input"))(ns(input$plottype))
    })
    output$uiSwitch <- shiny::renderUI({
      shiny::req(input$plottype)
      get(paste0(input$plottype, "UI"))(ns(input$plottype))
    })
    output$outputSwitch <- shiny::renderUI({
      shiny::req(input$plottype)
      get(paste0(input$plottype, "Output"))(ns(input$plottype))
    })
  })
}
switchInput <- function(id) {
  ns <- shiny::NS(id)
  list(
    bslib::layout_columns(
      shiny::selectInput(ns("plottype"), "Plot Type:",
                         c("hist","gghist","ggpoint")),
      datasetsInput(ns("datasets")),
      datasetsUI(ns("datasets"))),
    shiny::uiOutput(ns("inputSwitch"))
  )
}
switchUI <- function(id) {
  ns <- shiny::NS(id)
  shiny::uiOutput(ns("uiSwitch"))
}
switchOutput <- function(id) {
  ns <- shiny::NS(id)
  shiny::uiOutput(ns("outputSwitch"))
}
switchApp <- function() {
  ui <- bslib::page(
    switchInput("switch"), 
    switchUI("switch"),
    switchOutput("switch")
  )
  server <- function(input, output, session) {
    switchServer("switch")
  }
  shiny::shinyApp(ui, server)
}
```

- [R/switch.R](https://github.com/byandell/geyser/blob/main/R/switch.R)
- [inst/connect-modules/app.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/app.R)
- See [geyserDemo](https://connect.doit.wisc.edu/geyserDemo)

## Goofing Around with Duplicate Modules {.smaller}

- [inst/connect_modules/appTwin.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appTwin.R):
twin apps side by side
- [inst/connect_modules/appFlip.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appFlip.R):
flip controls between cards
- [inst/connect_modules/appDupe.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appDupe.R)
(**does not work--need unique `id`s!**)
- [inst/connect_modules/twin.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/twin.qmd)
- [inst/connect_modules/flip.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/flip.qmd)

## Quarto Examples

- View [slideDeck.qmd](https://github.com/byandell/geyser/blob/main/inst/slideDeck/slideDeck.qmd)
written in Quarto.
- Run Quarto examples in
[build_module](https://github.com/byandell/geyser/blob/main/inst/build_module)
&
[connect_modules](https://github.com/byandell/geyser/blob/main/inst/connect_modules).
- See <https://connect.doit.wisc.edu/geyserQuartoDemo>.
- Learn about [Quarto](https://quarto.org/docs/gallery/) through examples.
- See my notes at <https://github.com/byandell/quarto>.

## GitHub Repo Organization

```{.bash filename="byandell/geyser"}
- inst
  - build_module
    - 1_oldFaithful*
    - 2_newFaithful
    - 3_callModule
    - 4_moduleServer*
  - connect_modules
    - app.R*
    - appPages.R*
    - pages.qmd*
    - appRows.R*
    - rows.qmd*
  - slideDeck
    - images
    - slideDeck.qmd*
- R
  - hist.R*
  - gghist.R*
  - ggpoint.R*
  - datasets.R*
  - switch.R*
```

## Clone repo and run yourself

```{.bash filename="Clone this repo to your laptop"}
<https://github.com/byandell/geyser.git>
```

...

``` {.bash filename="Run the oldFaithful app"}
> library(shiny)
> runApp("oldFaithful")
```

or ...

``` {.bash filename="Run the Faithful Module app"}
> shiny::runApp("moduleServer")
```

or ...

``` {.bash filename="Call the geyserApp() test function"}
> source("moduleServer/moduleServer.R")
> geyserApp()
```

## Questions?

- <https://github.com/byandell/geyser>
- <https://connect.doit.wisc.edu/geyserShinyModules>
- <https://connect.doit.wisc.edu/geyserDemo>
- <https://connect.doit.wisc.edu/geyserQuartoDemo>

![[byandell.github.io](https://byandell.github.io)](images/adobe-express-qr-code.png)