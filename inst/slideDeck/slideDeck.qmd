---
title: "Geyser Shiny Modules<br>with Old Faithful"
author: "Brian S. Yandell"
date: "11 December 2024"
date-format: "D MMMM YYYY"
footer: "[byandell.github.io](https://byandell.github.io)"
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    code-block-height: 450px
# https://github.com/mine-cetinkaya-rundel/quarto-dashboards/blob/main/1-hello-dashboards/index.qmd
---

## Old Faithful Shiny App

:::: {.columns}
::: {.column width="60%"}
-   user interface `ui` and `server`
-   combined with `shinyApp()` tool
-   Shiny [FaithFul](https://shiny.posit.co/r/gallery/start-simple/faithful/) Demo
-   Old Faithful code in file
[app.R](https://github.com/byandell/geyser/blob/main/oldFaithful/app.R)
:::

::: {.column width="40%"}
![](images/faithful.png)
:::
::::

## Original Old Faithful Code {.smaller}

```{.r filename="inst/build_module/1_oldfaithful/app.R" code-line-numbers="|2-9|10|12-15|18-21|22-24|25-28"}
ui <- bootstrapPage(
  selectInput(inputId = "n_breaks",
              label = "Number of bins in histogram (approximate):",
              choices = c(10, 20, 35, 50), selected = 20),
  checkboxInput(inputId = "individual_obs",
                label = strong("Show individual observations"),
                value = FALSE),
  checkboxInput(inputId = "density", label = strong("Show density estimate"),
                value = FALSE),
  plotOutput(outputId = "main_plot", height = "300px"),
  
  # Display this only if the density is shown
  conditionalPanel(condition = "input.density == true",
    sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
      min = 0.2, max = 2, value = 1, step = 0.2))
)
server <- function(input, output) {
  output$main_plot <- renderPlot({
    hist(faithful$eruptions, probability = TRUE,
         breaks = as.numeric(input$n_breaks),
         xlab = "Duration (minutes)", main = "Geyser eruption duration")
    if (input$individual_obs) {
      rug(faithful$eruptions)
    }
    if (input$density) {
      dens <- density(faithful$eruptions, adjust = input$bw_adjust)
      lines(dens, col = "blue")
    }
  })
}
shiny::shinyApp(ui, server)
```

- `ui` has input, output and conditional slider
- `server` has `hist` and logic for optional `rug` and `density`

## FaithFul code with Server Logic {.smaller}

```{.r filename="inst/build_module/1_oldfaithful/appLogic.R" code-line-numbers="|7|17|22-26"}
ui <- bootstrapPage(
  selectInput(inputId = "n_breaks",
  ...
  plotOutput(outputId = "main_plot", height = "300px"),
  
  # Display this only if the density is shown
  uiOutput("bw_adjust")
#  conditionalPanel(condition = "input.density == true",
#    sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
#      min = 0.2, max = 2, value = 1, step = 0.2))
)
server <- function(input, output) {
  output$main_plot <- renderPlot({
  ...
    if (input$density) {
      req(input$bw_adjust)
      dens <- density(faithful$eruptions, adjust = input$bw_adjust)
      lines(dens, col = "blue")
    }
  })
  output$bw_adjust <- shiny::renderUI({
    if(input$density)
      sliderInput(inputId = "bw_adjust", label = "Bandwidth adjustment:",
                  min = 0.2, max = 2, value = 1, step = 0.2)
  })
}
shiny::shinyApp(ui, server)
```

Replace `conditionalPanel` in `ui` with `server` logic:

- Remove `conditionalPanel` from `ui`.
- Use `uiOutput` in `ui` and `renderUI` in `server`,
- Check if `bw_adjust` has been set with `req` before using.

## Modular Geyser App

```{.r filename="inst/build_module/4_moduleServer/app.R" code-line-numbers="|1-6|8-10|12"}
ui <- shiny::bootstrapPage(
  geyserInput(id = "geyser"), 
  geyserOutput(id = "geyser"),
  # Display this only if the density is shown
  geyserUI(id = "geyser")
)

server <- function(input, output, session) {
  geyserServer(id = "geyser")
}

shiny::shinyApp(ui, server)
```

- `id = "geyser"` connects UI and Server components.
- Function `geyserServer()` returns a `server` function.
- Explicit function assignment to create `server` is crucial.

## Shiny Module in one File

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R"}
geyserServer(id) # server logic steps
geyserInput(id)  # user input
geyserOutput(id) # user output
geyserUI(id)     # user input/output
geyserApp()      # app as test function
```


## Modular Geyser `Input`, `Output`, `UI` Components {.scrollable .smaller}

```{.r filename="inst/build_module/4_moduleServer/app.R" code-line-numbers="|1-2|3|16-17|20-21"}
geyserInput <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    shiny::selectInput(inputId = ns("n_breaks"),
                label = "Number of bins in histogram (approximate):",
                choices = c(10, 20, 35, 50),
                selected = 20),
    shiny::checkboxInput(inputId = ns("individual_obs"),
                  label = shiny::strong("Show individual observations"),
                  value = FALSE),
    
    shiny::checkboxInput(inputId = ns("density"),
                  label = shiny::strong("Show density estimate"),
                  value = FALSE))
}
geyserOutput <- function(id) {
  ns <- shiny::NS(id)
  shiny::plotOutput(ns("main_plot"), height = "300px")
}
geyserUI <- function(id) {
  ns <- shiny::NS(id)
  shiny::uiOutput(ns("bw_adjust"))
}
```

- `shiny::NS()` sets up Shiny namespace.
- `shiny::tagList()` for list of inputs.
- Explicit `package::function()` clarifies function origin.

## Modular `geyserServer` {.scrollable .smaller}

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R" code-line-numbers="|2|3|27"}
geyserServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    # Output Main Plot
    output$main_plot <- shiny::renderPlot({
      graphics::hist(faithful$eruptions,
                     probability = TRUE,
                     breaks = as.numeric(input$n_breaks),
                     xlab = "Duration (minutes)",
                     main = "Geyser eruption duration")
      
      if (input$individual_obs) {
        graphics::rug(faithful$eruptions)
      }
      if (input$density) {
        shiny::req(input$bw_adjust)
        dens <- stats::density(faithful$eruptions,
                               adjust = input$bw_adjust)
        graphics::lines(dens, col = "blue")
      }
    })
    
    # Input Bandwidth Adjustment
    output$bw_adjust <- shiny::renderUI({
      if(input$density) {
        shiny::sliderInput(inputId = ns("bw_adjust"),
                           label = "Bandwidth adjustment:",
                           min = 0.2, max = 2, value = 1, step = 0.2)
      }
    })
  })
}
```

- `shiny::moduleServer` returns `server` function.
- `session$ns` sets up Shiny namespace.
- `ns("by_adjust")` uses Shiny namespace.

## Self-contained `geyserApp()`

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R" code-line-numbers="|3-6|9|"}
geyserApp <- function() {
  ui <- shiny::bootstrapPage(
    geyserInput("geyser"), 
    geyserOutput("geyser"),
    # Display this only if the density is shown
    geyserUI("geyser")
  )
  server <- function(input, output, session) {
    geyserServer("geyser")
  }
  shiny::shinyApp(ui, server)
}
```

## Connecting Modules across Pages

:::: {.columns}
::: {.column width="50%"}
![inst/connect-modules/appPages.R](images/appPages.png)
:::

::: {.column width="50%"}
![inst/connect-modules/pages.qmd](images/pagesQmd.png)
:::
::::

## Connecting Modules across Pages

```{.r filename="inst/connect_modules/appPages.R" code-line-numbers="|2-3|4-5|6-7|9-11|"}
ui <- shiny::navbarPage("Geyser Modules with NavBar, Brian Yandell",
  shiny::tabPanel("hist",
    histInput("hist"), histOutput("hist"), histUI("hist")),
  shiny::tabPanel("gghist",
    gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist")),
  shiny::tabPanel("ggpoint",
    ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint")))
server <- function(input, output, session) {
  histServer("hist")
  gghistServer("gghist")
  ggpointServer("ggpoint")
}
shiny::shinyApp(ui, server)
```

- [appPages.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R)
- [pages.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/pages.qmd)

## Connecting Modules across Rows

:::: {.columns}
::: {.column width="50%"}
![inst/connect-modules/appRows.R](images/appRows.png)
:::

::: {.column width="50%"}
![inst/connect-modules/rows.qmd](images/rowsQmd.png)
:::
::::

## Connecting Modules across Rows with Data {.scrollable }

```{.r filename="inst/connect_modules/appRows.R" code-line-numbers="|3-5|6-12|14-17|"}
ui <- shiny::fluidPage(
  shiny::titlePanel("Geyser Rows Modules in Shiny, Brian Yandell"),
  shiny::fluidRow(
    shiny::column(6, datasetsInput("datasets")),
    shiny::column(6, datasetsUI("datasets"))),
  shiny::fluidRow(
    shiny::column(4, shiny::tagList(shiny::titlePanel("hist"),
      histInput("hist"), histOutput("hist"), histUI("hist"))),
    shiny::column(4, shiny::tagList(shiny::titlePanel("gghist"),
      gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist"))),
    shiny::column(4, shiny::tagList(shiny::titlePanel("ggpoint"),
      ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint")))))
server <- function(input, output, session) {
  dataset <- datasetsServer("datasets")
  histServer("hist", dataset)
  gghistServer("gghist", dataset)
  ggpointServer("ggpoint", dataset)
}
shiny::shinyApp(ui, server)
```

- [appRows.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R)
- [rows.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/rows.qmd)

## Wrapper App for Multiple Modules

![R/wrapperset.R](images/wrapperset.png)


## Wrapper App for Multiple Modules {.scrollable}

```{.r filename="R/wrapperset.R" code-line-numbers="|1-7|10-12|13-23|"}
wrappersetServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns
    dataset <- datasetsServer("datasets")
    histServer("hist", dataset)
    gghistServer("gghist", dataset)
    ggpointServer("ggpoint", dataset)
...
}
wrappersetInput <- function(id) { ...
wrappersetOutput <- function(id) { ...
wrappersetUI <- function(id) { ...
wrappersetApp <- function() {
  ui <- shiny::bootstrapPage(
    wrappersetInput("wrapperset"), 
    wrappersetUI("wrapperset"),
    wrappersetOutput("wrapperset")
  )
  server <- function(input, output, session) {
    wrappersetServer("wrapperset")
  }
  shiny::shinyApp(ui, server)
}
```

- [R/wrapperset.R](https://github.com/byandell/geyser/blob/main/R/wrapperset.R)

## GitHub Repo Organization

```{.bash filename="byandell/geyser"}
- inst
  - build_module
    - 1_oldFaithful*
    - 2_newFaithful
    - 3_callModule
    - 4_moduleServer*
  - connect_modules
    - app.R
    - appPages.R*
    - pages.qmd*
    - appRows.R*
    - rows.qmd*
  - slideDeck
    - images
    - slideDeck.qmd*
- R
  - hist.R*
  - gghist.R*
  - ggpoint.R*
  - datasets.R*
  - wrapperset.R*
  
```

## Clone repo and run yourself

``` {.bash filename="Rstudio Console"}
> library(shiny)
> runApp("oldFaithful")
```

or ...

``` {.bash filename="Rstudio Console"}
> shiny::runApp("moduleServer")
```

or ...

``` {.bash filename="Rstudio Console"}
> source("moduleServer/moduleServer.R")
> geyserApp()
```

## Questions?

- <https://github.com/byandell/geyser>
- <https://byandell.github.io>

![](images/adobe-express-qr-code.png)