---
title: "Geyser Shiny Python Modules<br>with Old Faithful"
author: "Brian S. Yandell"
date: last-modified
date-format: "D MMMM YYYY"
footer: "[byandell/geyser](https://github.com/byandell/geyser)"
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    code-block-height: 550px
---

# Plan of Study {.smaller}

:::: {.columns}
::: {.column width="60%"}
- [Build a Shiny R Module](https://github.com/byandell/geyser/blob/main/inst/build_module)
- Reactlog
- [Connect Multiple R Shiny Modules](https://github.com/byandell/geyser/blob/main/inst/connect_modules)
- [Shiny Python Modules](https://github.com/byandell/geyser/blob/main/inst/build_module/5_python)
- [Quarto Examples](https://github.com/byandell/geyser/blob/main/inst/slideDeck)
- [Organize your Repo](https://github.com/byandell/geyser/)
- Questions? Links to materials
:::

::: {.column width="40%"}
![[Shiny FaithFul App Example](https://shiny.posit.co/r/gallery/start-simple/faithful/)](images/faithful.png)

![[byandell.github.io](https://byandell.github.io)](images/adobe-express-qr-code.png)
:::
::::

# Build a Shiny R Module

```{.r filename="inst/build_module/1_oldfaithful/appLogic.R"}
ui <- bootstrapPage(
  selectInput("n_breaks", ...),
  checkboxInput("individual_obs", ...),
  checkboxInput("density", ...),
  plotOutput("main_plot", ...),
  uiOutput("bw_adjust")
)
server <- function(input, output) {
  output$main_plot <- renderPlot(...)
  output$bw_adjust <- renderUI(...)
}
shinyApp(ui, server)
```

- `ui` is (HTML) object with inputs & outputs
- `server` is function with logic for plot & density `bw`
- `renderPlot` serves to `plotOutput`
- `renderUI` serves to `uiOutput`

## Modular Geyser App

```{.r filename="inst/build_module/4_moduleServer/app.R"}
ui <- bootstrapPage(
  geyserInput("geyser"), 
  geyserOutput("geyser"),
  geyserUI("geyser")
)
server <- function(input, output, session) {
  geyserServer("geyser")
}
shinyApp(ui, server)
```

- `id` "geyser" connects `ui` and `server` components
- `ui` uses `Input`, `Output` and `UI` module functions
- Function `geyserServer()` returns a `server` function

## Self-contained `geyserApp()` function

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R"}
geyserApp <- function() {
  ui <- bootstrapPage(
    geyserInput("geyser"), 
    geyserOutput("geyser"),
    geyserUI("geyser")
  )
  server <- function(input, output, session) {
    geyserServer("geyser")
  }
  shinyApp(ui, server)
}
```

app function wraps around app components

## Shiny Module in one File

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R"}
geyserServer(id) # server logic steps
geyserInput(id)  # user input
geyserOutput(id) # user output
geyserUI(id)     # user input/output
geyserApp()      # app as test function
```

[inst/build_module/4_moduleServer/moduleServer.R](https://github.com/byandell/geyser/blob/main/inst/build_module/4_moduleServer/moduleServer.R)

## Modular Geyser Components {.scrollable}

```{.r filename="inst/build_module/4_moduleServer/app.R"}
geyserInput <- function(id) {
  ns <- NS(id)
  tagList(selectInput(ns("n_breaks"), ...),
          checkboxInput(ns("individual_obs"), ...),
          checkboxInput(ns("density"), ...))}
geyserOutput <- function(id) {
  ns <- NS(id)
  plotOutput(ns("main_plot"), ...)}
geyserUI <- function(id) {
  ns <- NS(id)
  uiOutput(ns("bw_adjust"))}
geyserServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$main_plot <- renderPlot(...)
    output$bw_adjust <- renderUI(...)}}
```

## App Server Detail

```{.r filename="inst/build_module/1_oldfaithful/appLogic.R"}
server <- function(input, output) {
  output$main_plot <- renderPlot({
    hist(eruptions, ...
         breaks = as.numeric(input$n_breaks))
    if (input$individual_obs) {
      rug(eruptions)}
    if (input$density) {
      dens <- density(eruptions, adjust = input$bw_adjust)
      lines(dens, col = "blue")}})
  output$bw_adjust <- renderUI({
    if(input$density)
      sliderInput("bw_adjust", ...)})
}
```

- inputs `individual_obs`, `n_breaks`, `density`, `bw_adjust`
- outputs `main_plot`, `bw_adjust`

## Modular Server Detail

```{.r filename="inst/build_module/4_moduleServer/moduleServer.R"}
geyserServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$main_plot <- renderPlot(...)
    output$bw_adjust <- renderUI({
      if(input$density) {
        sliderInput(ns("bw_adjust"), ...)}})
  })
}
```

- `moduleServer()` creates `server` function
- `ns("by_adjust")` uses shiny namespace
- `ns <- NS(id)` sets namespace in `ui`
- `ns <- session$ns` sets namespace in `server`

# Reactlog: Show App Reactivity

![[inst/reactlog](https://github.com/byandell/geyser/blob/main/inst/reactlog)](images/reactlog.png)

## Reactlog: Show App Reactivity

```{.bash filename="inst/reactlog"}
# Enable `reactlog` and run app.
reactlog::reactlog_enable()
runApp("inst/build_module/4_moduleServer")

# Show `reactlog` in browser.
reactlogShow()

# Save log of reactive session.
geyser_log <- reactlog()
saveRDS(geyser_log, "inst/reactlog/geyser.rds")

# Retrieve previously saved reactive session.
geyser_log <- readRDS("inst/reactlog/geyser.rds")
reactlog::reactlog_show(geyser_log)
```

- Read [Shiny Reactlog](https://rstudio.github.io/reactlog/articles/reactlog.html) article.
- See [inst/reactlog](https://github.com/byandell/geyser/blob/main/inst/reactlog) examples saved as `RDS` objects.
- Re-open repo to reset `reactlog` before enabling.

# Connecting Modules

:::: {.columns}
::: {.column width="50%"}
![[inst/connect-modules/appPages.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R)](images/appPages.png)
:::

::: {.column width="50%"}
![[inst/connect-modules/pages.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/pages.qmd)](images/pagesQmd.png)
:::
::::

## Connecting Modules across Pages

```{.r filename="inst/connect_modules/appPages.R" code-line-numbers="|2-7|9-11|"}
ui <- navbarPage("Geyser Modules with NavBar, Brian Yandell",
  tabPanel("hist",
    histInput("hist"), histOutput("hist"), histUI("hist")),
  tabPanel("gghist",
    gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist")),
  tabPanel("ggpoint",
    ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint")))
server <- function(input, output, session) {
  histServer("hist")
  gghistServer("gghist")
  ggpointServer("ggpoint")
}
shinyApp(ui, server)
```

- [inst/connect_modules/appPages.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appPages.R)
- [inst/connect_modules/pages.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/pages.qmd)

## Connecting with Rows and Columns

:::: {.columns}
::: {.column width="50%"}
![[inst/connect_modules/appRows.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R)](images/appRows.png)
:::

::: {.column width="50%"}
![[inst/connect_modules/rows.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/rows.qmd)](images/rowsQmd.png)
:::
::::

## Connecting with Rows and Columns {.smaller}

```{.r filename="inst/connect_modules/appRows.R"}
ui <- fluidPage(
  titlePanel("Geyser Rows Modules in Shiny, Brian Yandell"),
  fluidRow(
    column(6, datasetsInput("datasets")),
    column(6, datasetsUI("datasets"))),
  fluidRow(
    column(4, tagList(titlePanel("hist"),
      histInput("hist"), histOutput("hist"), histUI("hist"))),
    column(4, tagList(titlePanel("gghist"),
      gghistInput("gghist"), gghistOutput("gghist"), gghistUI("gghist"))),
    column(4, tagList(titlePanel("ggpoint"),
      ggpointInput("ggpoint"), ggpointOutput("ggpoint"), ggpointUI("ggpoint")))))
server <- function(input, output, session) {
  dataset <- datasetsServer("datasets")
  histServer("hist", dataset)
  gghistServer("gghist", dataset)
  ggpointServer("ggpoint", dataset)
}
shinyApp(ui, server)
```

- [inst/connect_modules/appRows.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRows.R):
Shiny app version
- [inst/connect_modules/rows.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/rows.qmd):
Quarto version
- [R/rows.R](https://github.com/byandell/geyser/blob/main/R/rows.R):
Shiny module version
- [inst/connect_modules/appRowsModule.R](https://github.com/byandell/geyser/blob/main/inst/connect_modules/appRowsModule.R):
Shiny app with `R/rows.R` functions

# Shiny Python Modules

```{.python filename="inst/build_module/5_python/app_hist.py"}
from shiny import App, ui
from geyser.hist import *
app_ui = ui.page_fluid(
    hist_input("hist"),
    hist_output("hist"),
    hist_ui("hist"))
def app_server(input, output, session):
    hist_server("hist")
app = App(app_ui, app_server)
```

```{.r filename="inst/build_module/4_moduleServer/app_hist.R"}
library(shiny)
library(geyser)
app_ui <- bootstrapPage(
  histInput("hist"), 
  histOutput("hist"),
  histUI("hist"))
app_server <- function(input, output, session) {
  histServer("hist")}
shinyApp(app_ui, app_server)
```

## Shiny Python Module Detail

```{.python filename="geyser/hist.py"}
from shiny import module, render, ui
def hist_server(input, output, session):
  @render.plot
  def main_plot():
    ...
  @render.ui
  def output_bw_adjust():
    ...
@module.ui
def hist_input():
  return ui.card(...)
@module.ui
def hist_output():
  return ui.output_plot("main_plot")
@module.ui
def hist_ui():
  return ui.output_ui("output_bw_adjust")
```

## Shiny Python Modules for Pages {.smaller}

```{.python filename="inst/connect_modules/app_pages.py"}
from shiny import App, ui
from geyser.hist import *
from geyser.gghist import *
from geyser.ggpoint import *
app_ui = ui.page_navbar(
  ui.nav_panel("hist",
               hist_input("hist"), 
               hist_output("hist"),
               hist_ui("hist")),
  ui.nav_panel("gghist",
               gghist_input("gghist"), 
               gghist_output("gghist"),
               gghist_ui("gghist")),
  ui.nav_panel("ggpoint",
               ggpoint_input("ggpoint"), 
               ggpoint_output("ggpoint"),
               ggpoint_ui("ggpoint")))
def app_server(input, output, session):
    hist_server("hist")
    gghist_server("gghist")
    ggpoint_server("ggpoint")
app = App(app_ui, app_server)
```

## Challenges with Python

- Need to install `geyser` package from GitHub or local
  - `pip install pip@git+https://github.com/byandell/geyser`
  - `pip install ~/Documents/GitHub/geyser`
- From `bash`, the `shiny run app_hist.py` may not work
- Running shiny python from within Rstudio with `reticulate`
can fail due to multithreading.
- Partial workaround with
[io.r_object()](https://github.com/byandell/geyser/blob/main/geyser/io.py)
- See more notes on
[README.md](https://github.com/byandell/geyser/blob/main/README.md#python-modules)

# Quarto Examples

- View [slideDeck.qmd](https://github.com/byandell/geyser/blob/main/inst/slideDeck/slideDeck.qmd)
written in Quarto.
- Run Quarto examples in
[build_module](https://github.com/byandell/geyser/blob/main/inst/build_module)
&
[connect_modules](https://github.com/byandell/geyser/blob/main/inst/connect_modules).
- See <https://connect.doit.wisc.edu/geyserQuartoDemo>.
- Learn about [Quarto](https://quarto.org/docs/gallery/) through examples.
- See my notes at <https://github.com/byandell/quarto>.

## [Quarto with R & Python](https://github.com/byandell/geyser/blob/main/inst/connect_modules/R_Python.qmd)

![](images/R_Python.png)

## Quarto with R & Python Details

- use Quarto `## Column` and `### Row` layout
- works well with non-shiny code (see
[inst/connect_modules/R_Python.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/R_Python.qmd))
- does not work with shiny R and Python code together (see
[inst/connect_modules/R_Python_Module.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/R_Python_Module.qmd))
  - R and Python code from this example work fine separately (see
[inst/connect_modules/R_Python_Module.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/R_Module.qmd)
and
[inst/connect_modules/R_Python_Module.qmd](https://github.com/byandell/geyser/blob/main/inst/connect_modules/Python_Module.qmd))



# GitHub Repo Organization

```{.bash filename="byandell/geyser"}
- inst
  - build_module
    - 1_oldFaithful*
    - 2_newFaithful
    - 3_callModule
    - 4_moduleServer*
  - connect_modules
    - app.R*
    - appPages.R*
    - pages.qmd*
    - appRows.R*
    - rows.qmd*
  - slideDeck
    - images
    - slideDeck.qmd*
- R
  - hist.R*
  - gghist.R*
  - ggpoint.R*
  - datasets.R*
  - switch.R*
```

## Clone repo and run yourself

```{.bash filename="Clone this repo to your laptop"}
https://github.com/byandell/geyser.git
```

...

``` {.bash filename="Run the oldFaithful app"}
> library(shiny)
> runApp("oldFaithful")
```

or ...

``` {.bash filename="Run the Faithful Module app"}
> runApp("moduleServer")
```

or ...

``` {.bash filename="Call the geyserApp() test function"}
> source("moduleServer/moduleServer.R")
> geyserApp()
```

# Questions?

- <https://github.com/byandell/geyser>
- <https://connect.doit.wisc.edu/geyserShinyModules>
- <https://connect.doit.wisc.edu/geyserDemo>
- <https://connect.doit.wisc.edu/geyserQuartoDemo>

![[byandell.github.io](https://byandell.github.io)](images/adobe-express-qr-code.png)