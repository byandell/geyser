---
title: "testretrieve"
format: html
editor: visual
---

```{python}
from geyser.datanames import datanames
dn = datanames()
dn
```

```{python}
import seaborn as sns
dn = sns.get_dataset_names()
dnames = []
for item in dn:
  data = sns.load_dataset(item)
  my_choices = data.columns.to_list()
  dt = (data.dtypes.values != 'object')
  print(item)
  print([x for x, y in zip(my_choices, dt) if y])
  print(item, dt.any(), sum(dt))
  if sum(dt) > 1:
      dnames.append(item)
dnames
```

## Successful Python App

```{python}
import shiny
from shiny import ui, reactive, render

# Create the default reactive expression
def create_default_reactive_greeting(input):
    @reactive.Calc
    def default_greeting():
        return f"Hello, {input.name()}!"
    return default_greeting

# Define the server logic with reactive_greeting as a parameter with a default reactive value
def server(input, output, session, reactive_greeting=None):
    if reactive_greeting is None:
        reactive_greeting = create_default_reactive_greeting(input)
    if reactive_greeting is None:
        return None
    
    @render.text
    def greeting():
      return reactive_greeting()
    
# Initialize the app with the server function
app = shiny.App(
    ui=ui.page_fluid(
        ui.input_text("name", "Enter your name:", ""),
        ui.output_text("greeting")
    ),
    server=lambda input, output, session: server(input, output, session, reactive_greeting=None)
)
```

```{python}
# Run the app
import geyser.io as io

if __name__ == "__main__":
    io.app_run(app)
```

## Get R object from package datasets

```{python}
import geyser.io as io

type(io.r_object('faithful'))
```

```{python}
# See https://rpy2.github.io/doc/latest/html/introduction.html#r-packages
# This code is in geyser.io.r_object
import rpy2.robjects as ro
from rpy2.robjects import pandas2ri
from rpy2.robjects.packages import importr, data

pandas2ri.activate()

object = 'faithful'

# Import dataset from R package datasets.
datasets = importr('datasets')
object_env = data(datasets).fetch(object)
object_rdf = object_env[object]
object_df = ro.conversion.rpy2py(object_rdf)
type(object_df)
```

```{python}
import geyser.io as io
faithful_df = io.r_object('faithful')
eruptions = faithful_df[faithful_df.columns[0]]
eruptions
```

```{python}
faithful_df.shape[1]
```

```{python}
mtcars = io.r_object('mtcars')
a = mtcars.columns[:2]
print(a)
mtcars[a]
```

## Simplified Geyser Histogram

```{python}
from shiny import App, render, ui
from plotnine import ggplot, aes, geom_line
import pandas as pd
import geyser.io as io
```

```{python}
faithful_df = io.r_object('faithful')
```

```{python}
eruptions = faithful_df.columns[0]
```

```{python message=False, warning=False}
from plotnine import ggplot, aes, after_stat, geom_histogram, geom_rug, stat_density

n_breaks = 20
p = (ggplot(faithful_df) +
    aes(x = eruptions) + 
    geom_histogram(aes(y=after_stat("density")), bins = n_breaks))
p = (p +
    geom_rug())
bw_adjust = 1
p = (p + 
    stat_density(adjust = bw_adjust, color = "blue"))
```

```{python}
p.show()
```

## Working geyser.hist

```{python}
import nest_asyncio
nest_asyncio.apply()
```

```{python}
import seaborn as sns
print(sns.get_data_home()) 
my_list = ['geyser'] + sns.get_dataset_names()
dataname = []
for item in my_list:
    if item not in dataname:
        dataname.append(item)
print(dataname)
```

```{python}
from shiny import App, render, ui
import geyser.io as io
from geyser.hist import hist_server, hist_input, hist_output, hist_ui, hist_app

app_ui = ui.page_fluid(
    hist_input("hist"),
    hist_output("hist"),
    hist_ui("hist")
)

def server(input, output, session):
    hist_server("hist")

app = App(app_ui, server)
```

```{python}
if __name__ == "__main__":
    io.app_run(app)
```

## Working geyser.gghist

```{python}
from shiny import App, render, ui
import geyser.io as io
from geyser.gghist import gghist_server, gghist_input, gghist_output, gghist_ui, gghist_app

app_ui = ui.page_fluid(
    gghist_input("gghist"),
    gghist_output("gghist"),
    gghist_ui("gghist")
)

def server(input, output, session):
    gghist_server("gghist")

app = App(app_ui, server)
```

```{python}
io.app_run(app)
```

```{python}
gghist_app()
```

## Working geyser.ggpoint

```{python}
from shiny import App, render, ui
import geyser.io as io
from geyser.ggpoint import ggpoint_server, ggpoint_input, ggpoint_output, ggpoint_ui, ggpoint_app

app_ui = ui.page_fluid(
    ggpoint_input("ggpoint"),
    ggpoint_output("ggpoint"),
    ggpoint_ui("ggpoint")
)

def server(input, output, session):
    ggpoint_server("ggpoint")

app = App(app_ui, server)
```

```{python}
io.app_run(app)
```

```{python}
ggpoint_app()
```

## Test reactive argument with hello python module

```{python}
import nest_asyncio
nest_asyncio.apply()
```

```{python}
with open("hello.py") as file:
  exec(file.read())
```

```{python}
hello_app()
```

## Test datasets.py

```{python}
import nest_asyncio
nest_asyncio.apply()
```

```{python}
data = sns.load_dataset('geyser')
a = data.columns.tolist()
print(a)
data[list(list(tuple(a)))]
```

```{python}
with open("../../../geyser/datasets.py") as file:
  exec(file.read())
```

```{python}
datasets_app()
```

## Test reactive dataset with geyser.hist

```{python}
import nest_asyncio
nest_asyncio.apply()
```

```{python}
with open("testhist.py") as file:
  exec(file.read())
```

```{python}
#| warning: false
#| message: false
thist_app()
```

```{python}
import geyser.io as io
faithful_df = io.r_object('faithful')
faithful_df
```
